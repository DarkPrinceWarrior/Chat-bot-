import logging
import random
import aiogram.utils.markdown as fmt
from aiogram.types import ParseMode
from aiogram.utils import executor
from db_query import Mysql_queries
import config
from telebot import types
import asyncio
from aiogram import Bot, Dispatcher
from aiogram import *
from aiogram.utils.exceptions import BotBlocked

# You can set parse_mode by default. HTML or MARKDOWN
bot = Bot(config.TOKEN, parse_mode=ParseMode.HTML)

# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)




@dp.message_handler(commands="start")
async def start_bot(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup()
    # one way to create button with text
    button_1 = types.KeyboardButton(text="–ù–∏—á–µ–≥–æ")
    keyboard.add(button_1)
    # create button like variable string
    button_2 = "–ü—Ä—ã–≥–∞—Ç—å"
    keyboard.add(button_2)
    await message.answer("–ß—Ç–æ –¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)


# # type /block to block the user
# @dp.message_handler(commands="block")
# async def cmd_block(message: types.Message):
#     await asyncio.sleep(10.0)  # –ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
#     await message.reply("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
#
#
# # handle the exception if user blocked the bot before
# @dp.errors_handler(exception=BotBlocked)
# async def error_bot_blocked(update: types.Update, exception: BotBlocked):
#     # Update: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
#     # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
#     print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")
#
#     # –¢–∞–∫–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True,
#     # –µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
#     return True


async def any_input_handler(message: types.Message):
    if message.md_text == "–ù–∏—á–µ–≥–æ":
        await message.answer("–û–∫–µ–π")
    elif message.md_text == "–ü—Ä—ã–≥–∞—Ç—å":
        await message.answer("–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º")
    else:
        mes = "–¢—ã —á–µ—Ç-—Ç–æ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–ª"
        await message.answer(
            fmt.text(
                fmt.hunderline(mes),
                fmt.text(fmt.hbold("–ò–°–ü–†–ê–í–¨!")),
                sep="\n"

            ))



# indeed there is fun "answer_dice" in Message
@dp.message_handler(commands="dice")
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")


@dp.message_handler(content_types=[types.ContentType.ANIMATION])
async def echo_document(message: types.Message):
    await message.reply_animation(message.animation.file_id)


@dp.message_handler(content_types=[types.ContentType.DOCUMENT])
async def download_doc(message: types.Message):
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
    await message.document.download()



# alternative version of specifying the handler
# can use it without (lambda x: True)
dp.register_message_handler(any_input_handler)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
